(1)什么是loadBeanDefinitions
AbstractApplicationContext#obtainFreshBeanFactory()#refreshBeanFactory()
AbstractRefreshableApplicationContext#refreshBeanFactory()#loadBeanDefinitions(beanFactory)
模板方法，有很多种子类实现loadBeanDefinitions，加个DB

loadBeanDefinition ==> doLoadBeanDefinition ==> registryBeanDefinition ==> doRegistryBeanDefinition
一个配置文件一个配置文件的加载
最终解析的到BD会被封装成BDHolder，最终被注册到BeanDefinitionRegistry
BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry())
注册时候，如果有别名，也会从BDHolder中取出所有的别名，再次注册到DBRegistry中

registerBeanDefinition是DefaultListableBeanFactory中的方法
注册的BD会被放入到DefaultListableBeanFactory*beanDefinitionMap中，如果同名BD不允许覆盖，会抛异常
DefaultListableBeanFactory.beanDefinitionMap.put(beanName, beanDefinition);
DefaultListableBeanFactory.beanDefinitionNames.add(beanName);
// 这里肯定是自动注册的BD，所以从手动BD中删除
DefaultListableBeanFactory.manualSingletonNames.remove(beanName);

总结一下，到这里已经初始化了 Bean 容器，<bean /> 配置也相应的转换为了一个个 BeanDefinition，
然后注册了各个 BeanDefinition 到注册中心，并且发送了注册事件

(2)什么时候初始化单例bean

初始化所有的 singleton beans
我们的重点当然是 finishBeanFactoryInitialization(beanFactory);
 这个巨头了，这里会负责初始化所有的 singleton beans。

注意，后面的描述中，我都会使用初始化或预初始化来代表这个阶段，Spring 会在这个阶段完成所有的
singleton beans 的实例化。

我们来总结一下，到目前为止，应该说 BeanFactory 已经创建完成，并且所有的实现了
BeanFactoryPostProcessor 接口的 Bean 都已经初始化并且其中的 postProcessBeanFactory(factory)
方法已经得到回调执行了。而且 Spring 已经“手动”注册了一些特殊的 Bean，如 ‘environment’、‘systemProperties’ 等。

剩下的就是初始化 singleton beans 了，我们知道它们是单例的，如果没有设置懒加载，那么
Spring 会在接下来初始化所有的 singleton beans。

(3)getMergedLocalBeanDefinition含义的理解
合并bean中的配置或者覆盖某些相同的配置
这里涉及到的就是 <bean parent="" /> 中的 parent 属性，我们来看看 Spring 中是用这个来干什么的。

首先，我们要明白，这里的继承和 java 语法中的继承没有任何关系，不过思路是相通的。
child bean 会继承 parent bean 的所有配置，也可以覆盖一些配置，当然也可以新增额外的配置。
合并父 Bean 中的配置，注意 <bean id="" class="" parent="" /> 中的 parent，用的不多

RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);

(4)getBean分析
AbstractBeanFactory 196

@Override
public Object getBean(String name) throws BeansException {
   return doGetBean(name, null, null, false);
}

// 我们在剖析初始化 Bean 的过程，但是 getBean 方法我们经常是用来从容器中获取 Bean 用的，注意切换思路，
// 已经初始化过了就从容器中直接返回，否则就先初始化再返回

(5)多例循环依赖搞不定分析
这个方法只有循环依赖时候才可能进入，其他时候第一次创建bean啥的，肯定不会抛异常的啦
AbstractBeanFactory 260
if (isPrototypeCurrentlyInCreation(beanName)) {
	throw new BeanCurrentlyInCreationException(beanName);
}

假设多例A依赖单例B，单例B也依赖多例A
先创建A的时候，等待注入A的依赖属性B的时候，会再去创建B，这时候B实例化好的，需要去获取A实例属性，就会再去创建A，这个时候
上面的检查isPrototypeCurrentlyInCreation就会发现，多例A已经在初始化了，抛异常吧！！！！

但是反过来，如果是先初始化的单例B会有问题吗？
如果先创建单例B，B创建好后，会去注入属性A的值，就会去创建A，A创建过程后，再去获取B属性，就会发现B属性是OK的，被放入到了
单例工厂中，这时候A会创建成功，然后B也OK了。


(6)DefaultSingletonBeanRegistry中的下述方法研读

protected Object getSingleton(String beanName, boolean allowEarlyReference) {
	Object singletonObject = this.singletonObjects.get(beanName);
	if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {
		synchronized (this.singletonObjects) {
			singletonObject = this.earlySingletonObjects.get(beanName);
			if (singletonObject == null && allowEarlyReference) {
				ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);
				if (singletonFactory != null) {
					singletonObject = singletonFactory.getObject();
					this.earlySingletonObjects.put(beanName, singletonObject);
					this.singletonFactories.remove(beanName);
				}
			}
		}
	}
	return (singletonObject != NULL_OBJECT ? singletonObject : null);
}

这个方法注意几个容器：singletonObjects，earlySingletonObjects，singletonFactories
这个类似缓存结构，singleObjects保存的是成品，已经完全创建且初始化好的bean，earlySingletonObjects是半成品，
半成品怎么来的呢？是单例工厂singletonFactories放入的，单例工厂放入半成品后，自己就没有存在的必要了，因为单例工厂
是创建半成品的地方，既然earlySingletonObjects已经存有它的半成品了，它就没存在的必要了，从singletonFactories删除

现在唯一的疑问了半成品工厂，即单例工厂什么时候创建的呢？其实单例工厂就是个临时存在的工厂，但我们创建一个bean，需要依赖其他
属性，所以去创建其他bean，但是其他属性bean又依赖当前bean，这时候我们只能当前bean的创建交给半成品工厂了，这样半成品工厂
相当于一个中间者，有了它，其他属性bean可以创建成功，其他属性bean创建成功后， 当前bean也可以创建成功了

(7)半成品工厂，即单例工厂什么时候创建的？
DefaultAutowireCapableBeanFactory的doCreateBean()方法负责添加的半成品工厂  526
下面属性回去判断，是否应该添加半成品工厂；
最后一个isSingletonCurrentlyInCreation(beanName)是关键
boolean earlySingletonExposure =
(mbd.isSingleton() && this.allowCircularReferences &&isSingletonCurrentlyInCreation(beanName))

(8)为啥会创建半成品工厂呢？
AbstractBeanFactory#doGetBean获取单例分析：239
先去查询缓存，getSingleton(beanName)，最终进入6，按照6分析，会依次从singletonObjects和earlySingletonObjects去取

没有，再去看看是不是已经有人再创建了，如果是则抛异常。这里如何理解呢？这里就是循环依赖导致。正常情况的循环依赖，A会将自己
放入放到半成品工厂了，这个时候B再来，B实例好后，再去实例A的时候，可以在半成品工厂中找到A，所以B此时执行到(5)的时候不会报错
那5啥时候报错呢？多例的时候会报错，比如如果此时A是多例的话，B实例化好后，会去再次实例化A，不会用到半成品工厂，此时会实例化两个A
就会报错了。

接着分析：如果获取单例bean，查询缓存，发现缓存和半成品工厂中都没有，则就是新建的单例，
会直接进入(9)

(9)DefaultSingletonBeanRegistry#getSingleton(String beanName, ObjectFactory<?> singletonFactory)

先从缓存singletonObjects找，找不到，beforeSingletonCreation(beanName);设置标记，表名当前bean正在创建中(****)
通过singletonFactory.getObject获取，即调用
DefaultAutowireCapableBeanFactory#createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)
这个方法会进行一些前置处理，然后再次调用doCreateBean(beanName, mbdToUse, args)处理

doCreateBean才是真正的主角：
创建bean，实例化bean，如果发现bean可以依赖注入，并且已经是在创建过程中(****)，还会创建半成品工厂。这样单例A就创建成功了

上面好像弄反了， 是先初始化被依赖的bean，也就是先初始化B，A依赖B的话；但是具体的流程还是没啥太大的问题的

(10)还有个疑问，半成品工厂啥时候清除的？不清除会浪费内存的吧？

(11)什么时候进行bean属性装配？
DefaultAutowireCapableBeanFactory#populateBean()方法


